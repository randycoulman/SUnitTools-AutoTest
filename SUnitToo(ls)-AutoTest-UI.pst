<?xml version="1.0"?><st-source><!-- Name: SUnitToo(ls)-AutoTest-UINotice: The MIT LicenseCopyright (c) 2012-2013 , Randy CoulmanPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.Comment: # SUnitToo(ls)-AutoTest-UIDisplay a window to show the results of automatically-triggered test runs.SUnitToo(ls)-AutoTest is licensed under the MIT license.  See the Copyright tab in the RB, the 'notice' property of this package, or the License.txt file on GitHub.SUnitToo(ls)-AutoTest's primary home is the [Cincom Public Store Repository](http://www.cincomsmalltalk.com/CincomSmalltalkWiki/Public+Store+Repository).  Check there for the latest version.  It is also on [GitHub](https://github.com/randycoulman/SUnitTools-AutoTest).SUnitToo(ls)-AutoTest was developed in VW 7.9.1, but is compatible with VW 7.7 and later.  If you find any incompatibilities with VW 7.7 or later, let me know (see below for contact information) or file an issue on GitHub.See the package comment on SUnitToo(ls)-AutoTest for more information.# Understanding the Code`AutoTestUI` is the main class.  It is composed of a `HitCountView` and a `StatusView`. There is also a menu item definition implemented as an extension on `VisualLauncher`.# AcknowledgementsSUnitToo(ls)-AutoTest was inspired by the [Pharo Autotest](http://www.squeaksource.com/Autotest.html) package by Laurent Laffont.# ContributingI'm happy to receive bug fixes and improvements to this package.  If you'd like to contribute, please publish your changes as a "branch" (non-integer) version in the Public Store Repository and contact me as outlined below to let me know.  I will merge your changes back into the "trunk" as soon as I can review them.# Contact InformationIf you have any questions about SUnitToo(ls)-AutoTest-UI and how to use it, feel free to contact me.* Web site: http://randycoulman.com* Blog: Courageous Software (http://randycoulman.com/blog)* E-mail: randy _at_ randycoulman _dot_ com* Twitter: @randycoulman* GitHub: randycoulmanDbIdentifier: /Users/randy/repositories/store/RCSmalltalkDbTrace: 1706DbUsername: randyDbVersion: 4DevelopmentPrerequisites: #(#(#any 'Base VisualWorks' '') #(#any 'Browser-BrowserUI' '') #(#any 'SUnitToo' '') #(#any 'SUnitToo(ls)-AutoTest' '') #(#any 'SUnitToo(ls)' ''))PackageName: SUnitToo(ls)-AutoTest-UIParcel: #('SUnitToo(ls)-AutoTest-UI')PrerequisiteDescriptions: #(#(#name 'Base VisualWorks' #componentType #bundle) #(#name 'Browser-BrowserUI' #componentType #package) #(#name 'SUnitToo' #componentType #package) #(#name 'SUnitToo(ls)-AutoTest' #componentType #package) #(#name 'SUnitToo(ls)' #componentType #package))PrerequisiteParcels: #(#('Base VisualWorks' '') #('Browser-BrowserUI' '') #('SUnitToo' '') #('SUnitToo(ls)-AutoTest' '') #('SUnitToo(ls)' ''))PrintStringCache: (4,randy)Version: 4Date: 12:17:59 AM November 2, 2014 --><time-stamp>From VisualWorksÂ® Personal Use Edition, 8.0 of September 26, 2014 on November 2, 2014 at 12:17:59 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>SUnitToolsAutoTestUI</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			private SUnitToolsAutoTest.*			private SUnit.*			</imports><category></category><attributes><package>SUnitToo(ls)-AutoTest-UI</package></attributes></name-space><class><name>AutoTestUI</name><environment>SUnitToolsAutoTestUI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SUnitToo(ls)-AutoTest-UI</package></attributes></class><comment><class-id>SUnitToolsAutoTestUI.AutoTestUI</class-id><body>I am the main UI for AutoTest.  Most of my work is done by my nested HitCountView and StatusView.  I provide support for canceling a test run.  I also respond to look &amp; feel changes (see #postBuildWith:, #windowEvent:from:, and #reinstallInterface).</body></comment><class><name>HitCountView</name><environment>SUnitToolsAutoTestUI</environment><super>Graphics.VisualPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>announcer hitCount </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SUnitToo(ls)-AutoTest-UI</package></attributes></class><comment><class-id>SUnitToolsAutoTestUI.HitCountView</class-id><body>HitCountView displays the number of times the most recently-changed method was executed during the test run.  If there were no hits, it turns the background red; otherwise it is green.Instance Variables	announcer	&lt;Object&gt;	description of announcer	hitCount	&lt;HitCount&gt;	description of hitCount</body></comment><class><name>StatusView</name><environment>SUnitToolsAutoTestUI</environment><super>Graphics.VisualPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>announcer lastResults statusText testsToRun testsRun wasAborted </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SUnitToo(ls)-AutoTest-UI</package></attributes></class><comment><class-id>SUnitToolsAutoTestUI.StatusView</class-id><body>I am the main status display for AutoTestUI.  While a test suite is running, I display the progress of the running test suite.  When it is finished, I display the results.  If there are any failures or errors, I can be clicked and I will open a browser on the failing tests, or if there is only one failing test, I will re-run it, showing the failure in a debugger.I use the "self-controlling part" idiom that Travis Griggs has been introducing recently.  See the "event driven" protocol.Instance Variables	announcer	&lt;AutoTestAnnouncer&gt;	The announcer that reports test run status.	lastResults	&lt;AutoTestResults&gt;	The results of the most recent test run, or nil if there are none.	statusText	&lt;String&gt;	The current status of the test run.	testsRun	&lt;Integer&gt;	The number of tests run so far.	testsToRun	&lt;Integer&gt;	The total number of tests in the test suite.	wasAborted    &lt;Boolean&gt; True if the most recent test run was aborted due to a TestResourceError.</body></comment><methods><class-id>SUnitToolsAutoTestUI.AutoTestUI</class-id> <category>events</category><body package="SUnitToo(ls)-AutoTest-UI">reInstallInterface	"Rebuild the UI in response to a look&amp; feel change"	| spec window |	window := builder window.	window component release.	window controller reInstallEventDispatcher.	builder := self builderClass new.	builder setWindow: window.	builder source: self.	spec := self class interfaceSpecFor: #windowSpec.	self preBuildWith: builder.	builder add: spec.	self postBuildWith: builder.	builder doFinalHookup.	self postOpenWith: builder.	^builder</body><body package="SUnitToo(ls)-AutoTest-UI">windowEvent: anEvent from: aWindow	super windowEvent: anEvent from: aWindow.	anEvent key = #newGraphicsDevice ifTrue: [self reInstallInterface]</body></methods><methods><class-id>SUnitToolsAutoTestUI.AutoTestUI</class-id> <category>interface opening</category><body package="SUnitToo(ls)-AutoTest-UI">postBuildWith: aBuilder	super postBuildWith: aBuilder.	"Respond to look&amp;feel changes"	(builder window)		application: self;		sendWindowEvents: #(#newGraphicsDevice).	(self widgetAt: #cancelButton)		ifNotNil: 			[:cancelButton |			cancelButton isEnabled: false.			(self announcer)				when: RunningSuite					do: [cancelButton isEnabled: true]					for: self;				when: TestRunOver					do: [cancelButton isEnabled: false]					for: self]</body></methods><methods><class-id>SUnitToolsAutoTestUI.AutoTestUI</class-id> <category>accessing</category><body package="SUnitToo(ls)-AutoTest-UI">announcer	^self autoTest announcer</body><body package="SUnitToo(ls)-AutoTest-UI">autoTest	^AutoTest current</body></methods><methods><class-id>SUnitToolsAutoTestUI.AutoTestUI</class-id> <category>aspects</category><body package="SUnitToo(ls)-AutoTest-UI">hitCountView	^HitCountView announcer: self announcer</body><body package="SUnitToo(ls)-AutoTest-UI">requestCancel	self autoTest requestCancel</body><body package="SUnitToo(ls)-AutoTest-UI">statusView	^StatusView announcer: self announcer</body></methods><methods><class-id>SUnitToolsAutoTestUI.AutoTestUI</class-id> <category>interface closing</category><body package="SUnitToo(ls)-AutoTest-UI">noticeOfWindowClose: aWindow	self announcer unsubscribe: self.	super noticeOfWindowClose: aWindow</body></methods><methods><class-id>SUnitToolsAutoTestUI.HitCountView</class-id> <category>private</category><body package="SUnitToo(ls)-AutoTest-UI">refreshDisplay	[self invalidateNow] uiEventFor: self topComponent</body><body package="SUnitToo(ls)-AutoTest-UI">runningSuite: aRunningSuite	hitCount := HitCount new.	self refreshDisplay</body><body package="SUnitToo(ls)-AutoTest-UI">testRunCanceled	hitCount := HitCount new.	self refreshDisplay</body><body package="SUnitToo(ls)-AutoTest-UI">testRunCompleted: aTestRunCompleted	| lastResults |	lastResults := aTestRunCompleted results.	hitCount := lastResults hitCount.	self refreshDisplay</body></methods><methods><class-id>SUnitToolsAutoTestUI.HitCountView</class-id> <category>displaying</category><body package="SUnitToo(ls)-AutoTest-UI">displayBackgroundOn: aGC	aGC		paint: hitCount statusColor;		displayRectangle: self bounds</body><body package="SUnitToo(ls)-AutoTest-UI">displayOn: aGC	super displayOn: aGC.	self		displayBackgroundOn: aGC;		displayTextOn: aGC</body><body package="SUnitToo(ls)-AutoTest-UI">displayTextOn: aGC	| ts text |	aGC paint: SymbolicPaint foreground.	ts := TextStream on: String new.	ts nextPutAll: 'Hits: '.	ts emphasis: #bold.	ts nextPutAll: (hitCount isApplicable				ifTrue: [hitCount count printString]				ifFalse: ['n/a']).	text := ts contents asComposedText.	text displayOn: aGC at: self bounds center - text extent half</body></methods><methods><class-id>SUnitToolsAutoTestUI.HitCountView</class-id> <category>initialize-release</category><body package="SUnitToo(ls)-AutoTest-UI">initializeAnnouncer: anAutoTestAnnouncer	announcer := anAutoTestAnnouncer.	hitCount := HitCount new.	announcer		when: RunningSuite send: #runningSuite: to: self;		when: TestRunCanceled , TestRunAborted			send: #testRunCanceled			to: self;		when: TestRunCompleted send: #testRunCompleted: to: self</body><body package="SUnitToo(ls)-AutoTest-UI">release	announcer unsubscribe: self.	super release</body></methods><methods><class-id>SUnitToolsAutoTestUI.HitCountView</class-id> <category>bounds accessing</category><body package="SUnitToo(ls)-AutoTest-UI">preferredBounds	^Point zero extent: self preferredExtent</body><body package="SUnitToo(ls)-AutoTest-UI">preferredExtent	^Screen default bounds extent</body></methods><methods><class-id>SUnitToolsAutoTestUI.HitCountView class</class-id> <category>instance creation</category><body package="SUnitToo(ls)-AutoTest-UI">announcer: anAutoTestAnnouncer	^self new initializeAnnouncer: anAutoTestAnnouncer</body></methods><methods><class-id>SUnitToolsAutoTestUI.StatusView</class-id> <category>private - announcements</category><body package="SUnitToo(ls)-AutoTest-UI">finishedTest	testsRun := testsRun + 1.	self refreshDisplay</body><body package="SUnitToo(ls)-AutoTest-UI">runningSuite: aRunningSuite	testsToRun := aRunningSuite testSuite testCount.	testsRun := 0.	wasAborted := false.	self updateStatus: ''</body><body package="SUnitToo(ls)-AutoTest-UI">skippingTests: aSkippingTests	testsRun := testsRun + aSkippingTests count.	self refreshDisplay</body><body package="SUnitToo(ls)-AutoTest-UI">startingTest: aStartingTest	self updateStatus: aStartingTest testCase asDefinition printString</body><body package="SUnitToo(ls)-AutoTest-UI">testRunAborted	wasAborted := true.	self clearResults.	^self updateStatus: 'Aborted: Test resource error'</body><body package="SUnitToo(ls)-AutoTest-UI">testRunCanceled	self clearResults.	^self updateStatus: 'Test run canceled'</body><body package="SUnitToo(ls)-AutoTest-UI">testRunCompleted: aTestRunCompleted	| ws |	lastResults := aTestRunCompleted results.	lastResults isEmpty ifTrue: [^self updateStatus: 'No tests to run.'].	testsRun := testsToRun.	"In case any tests were skipped"	ws := (String new: 40) writeStream.	ws		print: lastResults;		space;		nextPut: $(.	ws policy dateAndTimePolicy printShort: Timestamp now on: ws.	ws nextPut: $).	self updateStatus: ws contents</body></methods><methods><class-id>SUnitToolsAutoTestUI.StatusView</class-id> <category>initialize-release</category><body package="SUnitToo(ls)-AutoTest-UI">initializeAnnouncer: anAutoTestAnnouncer	announcer := anAutoTestAnnouncer.	statusText := 'Auto Test runs relevant tests when you save a method.'.	wasAborted := false.	testsToRun := 0.	testsRun := 0.	announcer		when: RunningSuite send: #runningSuite: to: self;		when: StartingTest send: #startingTest: to: self;		when: SkippingTests send: #skippingTests: to: self;		when: FinishedTest send: #finishedTest to: self;		when: TestRunCanceled send: #testRunCanceled to: self;		when: TestRunAborted send: #testRunAborted to: self;		when: TestRunCompleted send: #testRunCompleted: to: self</body><body package="SUnitToo(ls)-AutoTest-UI">release	announcer unsubscribe: self.	super release</body></methods><methods><class-id>SUnitToolsAutoTestUI.StatusView</class-id> <category>event driven</category><body package="SUnitToo(ls)-AutoTest-UI">getEventHandler	^self</body><body package="SUnitToo(ls)-AutoTest-UI">handleEvent: anEvent	| methodName |	methodName := ('handle' , anEvent class name , ':') asSymbol.	(self respondsTo: methodName)		ifTrue: [^self perform: methodName with: anEvent]</body><body package="SUnitToo(ls)-AutoTest-UI">handleRedButtonReleasedEvent: anEvent	(lastResults isNil or: [lastResults allPassed]) ifTrue: [^self].	self defects size = 1		ifTrue: [self debugBrokenTest]		ifFalse: [self browseBrokenTests]</body><body package="SUnitToo(ls)-AutoTest-UI">handlerForMouseEvent: aMouseEvent	^(self containsMouseEvent: aMouseEvent) ifTrue: [self] ifFalse: [nil]</body></methods><methods><class-id>SUnitToolsAutoTestUI.StatusView</class-id> <category>private</category><body package="SUnitToo(ls)-AutoTest-UI">browseBrokenTests	| definitions |	definitions := (self defects collect: [:each | each definition]) sort.	Refactory.Browser.RefactoringBrowser		openListBrowserOn: definitions		label: ('&lt;1s&gt; &lt;2s&gt; / &lt;3s&gt;'				expandMacrosWith: Date today shortPrintString				with: Time now shortPrintString				with: lastResults printString)		initialSelection: nil</body><body package="SUnitToo(ls)-AutoTest-UI">clearResults	lastResults := nil.	testsRun := 0.	testsToRun := 0</body><body package="SUnitToo(ls)-AutoTest-UI">debugBrokenTest	| testCase |	testCase := self defects first asTestCase.	Refactory.Browser.SUnitTooMiniBar new debug: testCase</body><body package="SUnitToo(ls)-AutoTest-UI">defects	^lastResults defects</body><body package="SUnitToo(ls)-AutoTest-UI">isRunning	^testsRun &lt; testsToRun</body><body package="SUnitToo(ls)-AutoTest-UI">refreshDisplay	[self invalidateNow] uiEventFor: self topComponent</body><body package="SUnitToo(ls)-AutoTest-UI">updateStatus: aString	statusText := aString.	self refreshDisplay</body></methods><methods><class-id>SUnitToolsAutoTestUI.StatusView</class-id> <category>displaying</category><body package="SUnitToo(ls)-AutoTest-UI">backgroundPaint	self isRunning ifTrue: [^ColorValue yellow].	wasAborted ifTrue: [^ColorValue red].	^lastResults		ifNil: [SymbolicPaint background]		ifNotNil: #codeToolLabelColor</body><body package="SUnitToo(ls)-AutoTest-UI">displayBackgroundOn: aGC	| progress rect paint |	paint := self backgroundPaint ifNil: [^self].	progress := testsToRun isZero ifTrue: [1] ifFalse: [testsRun / testsToRun].	rect := self bounds copy.	rect width: (rect width * progress) rounded.	aGC		paint: paint;		displayRectangle: rect</body><body package="SUnitToo(ls)-AutoTest-UI">displayOn: aGC	self displayBackgroundOn: aGC.	self displayStatusOn: aGC</body><body package="SUnitToo(ls)-AutoTest-UI">displayStatusOn: aGC	| text |	aGC paint: SymbolicPaint foreground.	text := statusText asText asComposedText.	text displayOn: aGC		at: self bounds leftCenter + (15 @ text height half negated)</body></methods><methods><class-id>SUnitToolsAutoTestUI.StatusView</class-id> <category>bounds accessing</category><body package="SUnitToo(ls)-AutoTest-UI">preferredBounds	^Point zero extent: self preferredExtent</body><body package="SUnitToo(ls)-AutoTest-UI">preferredExtent	^Screen default bounds extent</body></methods><methods><class-id>SUnitToolsAutoTestUI.StatusView class</class-id> <category>instance creation</category><body package="SUnitToo(ls)-AutoTest-UI">announcer: anAutoTestAnnouncer	^self new initializeAnnouncer: anAutoTestAnnouncer</body></methods><methods><class-id>SUnitToolsAutoTest.HitCount</class-id> <category>displaying</category><body package="SUnitToo(ls)-AutoTest-UI">statusColor	self isApplicable ifFalse: [^SymbolicPaint background].	^self isOK ifTrue: [ColorValue green] ifFalse: [ColorValue red]</body></methods><methods><class-id>SUnitToolsAutoTestUI.AutoTestUI class</class-id> <category>interface specs</category><body package="SUnitToo(ls)-AutoTest-UI">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Auto Test' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1240 547 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 100 0 0 0 -90 1 0 1 ) 					#name: #statusView 					#flags: 0 					#component: #statusView ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -85 1 -20 0.5 -5 1 20 0.5 ) 					#name: #cancelButton 					#model: #requestCancel 					#label: 'Cancel' 					#defaultable: true ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 100 0 0 1 ) 					#name: #hitCountView 					#component: #hitCountView ) ) ) )</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus</category><body package="SUnitToo(ls)-AutoTest-UI">openAutoTestUI	&lt;	menuItem: 'AutoTest UI'	nameKey: nil	menu: #(#menuBar #tools)	position: 19.1&gt;	self openApplicationForClassNamed: #{SUnitToolsAutoTestUI.AutoTestUI}</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>VisualPart</name><environment>Graphics</environment><super>Graphics.VisualComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>container eventHandlers properties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Visual Objects</category><attributes><package>Graphics-Visual Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>HitCount</name><environment>SUnitToolsAutoTest</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>count </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SUnitToo(ls)-AutoTest</package></attributes></class></st-source>